#include <NewPing.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


const int vibrationMotorPin = 2; // Change this to the actual pin number
const int buttonPin = 16;  // Digital pin connected to the button
int buttonState = HIGH;   // Variable to store the button state
int lastButtonState = HIGH; // Variable to store the previous button state
#define TRIGGER_PIN 14     // Arduino digital pin for the sensor trigger
#define ECHO_PIN 15       // Arduino digital pin for the sensor echo
#define GESTURE_THRESHOLD 1000  // Adjust this threshold based on your setup


NewPing sonar(TRIGGER_PIN, ECHO_PIN); // Create a NewPing object


#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SSD1306_I2C_ADDRESS 0x3C // Replace with your OLED display's I2C address
#define SDA_PIN 4  // Replace with the desired SDA pin number
#define SCL_PIN 5  // Replace with the desired SCL pin number


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


void setup() {
  pinMode(vibrationMotorPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);  // Set the button pin as an input with pull-up resistor
  Serial.begin(9600);  // Initialize serial communication


  if (!display.begin(SSD1306_I2C_ADDRESS, OLED_RESET, SDA_PIN, SCL_PIN)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.display(); // Display startup message
  delay(2000);
  display.clearDisplay();
}


void loop() {
  //VIBRATION MOTOR
    // Turn on the vibration motor
  digitalWrite(vibrationMotorPin, HIGH);
  delay(5000);  // Keep the motor on for 5 seconds (adjust as needed)


  // Turn off the vibration motor
  digitalWrite(vibrationMotorPin, LOW);
  delay(1000);  // Delay for 1 second before the next cycle (adjust as needed)


  //BUTTONNNN
  // Read the current state of the button
  buttonState = digitalRead(buttonPin);


  // Check if the button state has changed
  if (buttonState != lastButtonState) {
    // Button state has changed, send a message
    if (buttonState == LOW) {
      Serial.println("Button pressed!");
    } else {
      Serial.println("Button released!");
    }


    // Update lastButtonState with the current button state
    lastButtonState = buttonState;
  }


  //ULTRASONIC SENSOR
  delay(50); // Wait for 50 milliseconds between measurements


  // Measure the distance using the NewPing library
  unsigned int distance = sonar.ping_cm();


  // Check if an object (like a hand) is within the threshold distance
  if (distance < GESTURE_THRESHOLD) {
    Serial.println("Hand detected! Perform your gesture logic here.");
    // Add your gesture recognition logic or actions here
  }


  // Add a small delay to avoid reading the button state too quickly
  delay(50);


  display.setTextSize(10);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.print("Rate your mood?");
  display.display();
  delay(2000);  // Display for 2 seconds (adjust as needed)
  display.clearDisplay();
  delay(1000);  // Pause between displays (adjust as needed)
}










